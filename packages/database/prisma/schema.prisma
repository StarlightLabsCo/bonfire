// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url  	= env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Next Auth
// https://next-auth.js.org/
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WebSocketAuthenticationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model User {
  // User Info
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts                     Account[]
  sessions                     Session[]
  webSocketAuthenticationToken WebSocketAuthenticationToken[]

  // Payment / Monetization
  stripeCustomerId String? @unique

  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?

  // Core
  instances Instance[]

  // Logging / Dataset Collection
  openAIRequestLog     OpenAIRequestLog[]
  elevenLabsRequestLog ElevenLabsRequestLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InstanceStage {
  INIT_STORY_FINISH // User action

  CREATE_OUTLINE_START
  CREATE_OUTLINE_ERROR
  CREATE_OUTLINE_FINISH

  INTRODUCE_STORY_START
  INTRODUCE_STORY_ERROR
  INTRODUCE_STORY_FINISH

  CREATE_IMAGE_START
  CREATE_IMAGE_ERROR
  CREATE_IMAGE_FINISH

  GENERATE_ACTION_SUGGESTIONS_START
  GENERATE_ACTION_SUGGESTIONS_ERROR
  GENERATE_ACTION_SUGGESTIONS_FINISH

  ADD_PLAYER_MESSAGE_FINISH // User action

  ROLL_DICE_START
  ROLL_DICE_ERROR
  ROLL_DICE_FINISH

  NARRATOR_REACTION_START
  NARRATOR_REACTION_ERROR
  NARRATOR_REACTION_FINISH

  NARRATOR_PLANNING_START
  NARRATOR_PLANNING_ERROR
  NARRATOR_PLANNING_FINISH

  CONTINUE_STORY_START
  CONTINUE_STORY_ERROR
  CONTINUE_STORY_FINISH
}


model Instance {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  name String

  narratorPersonality String? 
  narratorVoiceId String? 

  description String? // Description is what's given by quickstart
  storyOutline String? // Story Outline is defined by the user if they want to use it

  imageStyle String?

  stage InstanceStage @default(INIT_STORY_FINISH)
  history InstanceStage[]
  error String?

  locked Boolean @default(false)
  lockedAt DateTime?

  messages Message[]  

  public Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(cuid())

  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role         MessageRole
  content      String
  name         String?
  function_call String? // this one is specifically this case because openai api uses snake_case and we can just use prisma select
}

enum MessageRole {
  system
  assistant
  function
  user
}

model OpenAIRequestLog {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  model String

  messages String @db.Text // Stringified JSON of the messages

  streamed Boolean @default(false)

  role         MessageRole?
  content      String?      @db.Text
  function_call String?

  // ---- Both ---
  responseTime Int

  promptTokens     Int
  completionTokens Int
  totalTokens      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ElevenLabsRequestLog {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  text String
  numCharacters       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
